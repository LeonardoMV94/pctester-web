document.addEventListener('DOMContentLoaded', () => {
  const $ = document.querySelector.bind(document);
  const $$ = document.querySelectorAll.bind(document);

  const handleScroll = () => {
    const backToTop = $('.back-to-top');
    window.scrollY > 100 ? backToTop.style.display = 'block' : backToTop.style.display = 'none';
  };

  window.addEventListener('scroll', handleScroll);

  $('.back-to-top').addEventListener('click', (e) => {
    e.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  });

  new WOW().init();

  const navMenuContainer = $('#nav-menu-container');
  if (navMenuContainer) {
    const mobileNav = navMenuContainer.cloneNode(true);
    mobileNav.id = 'mobile-nav';
    mobileNav.querySelector('ul').removeAttribute('class');
    mobileNav.querySelector('ul').removeAttribute('id');
    
    document.body.appendChild(mobileNav);
    document.body.insertAdjacentHTML('afterbegin', '<button type="button" id="mobile-nav-toggle"><i class="fa fa-bars"></i></button>');
    document.body.insertAdjacentHTML('beforeend', '<div id="mobile-body-overly"></div>');

    $$('#mobile-nav .menu-has-children').forEach(el => {
      el.insertAdjacentHTML('afterbegin', '<i class="fa fa-chevron-down"></i>');
    });

    document.addEventListener('click', (e) => {
      if (e.target.closest('.menu-has-children i')) {
        const parent = e.target.parentElement;
        parent.classList.toggle('menu-item-active');
        parent.querySelector('ul').classList.toggle('menu-item-active');
        e.target.classList.toggle('fa-chevron-up');
        e.target.classList.toggle('fa-chevron-down');
      }

      if (e.target.matches('#mobile-nav-toggle')) {
        document.body.classList.toggle('mobile-nav-active');
        $('#mobile-nav-toggle i').classList.toggle('fa-times');
        $('#mobile-nav-toggle i').classList.toggle('fa-bars');
        $('#mobile-body-overly').style.display = $('#mobile-body-overly').style.display === 'none' ? 'block' : 'none';
      }

      const mobileNav = $('#mobile-nav');
      const mobileNavToggle = $('#mobile-nav-toggle');
      if (!mobileNav.contains(e.target) && !mobileNavToggle.contains(e.target) && document.body.classList.contains('mobile-nav-active')) {
        document.body.classList.remove('mobile-nav-active');
        $('#mobile-nav-toggle i').classList.toggle('fa-times');
        $('#mobile-nav-toggle i').classList.toggle('fa-bars');
        $('#mobile-body-overly').style.display = 'none';
      }
    });
  } else {
    $$('#mobile-nav, #mobile-nav-toggle').forEach(el => el.style.display = 'none');
  }

  $$('.nav-menu a, #mobile-nav a, .scrollto').forEach(link => {
    link.addEventListener('click', function(e) {
      if (this.hash && location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') && location.hostname == this.hostname) {
        e.preventDefault();
        const target = $(this.hash);
        if (target) {
          let offset = 0;
          if ($('#header')) {
            offset = $('#header').offsetHeight;
            if (!$('#header').classList.contains('header-fixed')) {
              offset -= 20;
            }
          }
          window.scrollTo({
            top: target.offsetTop - offset,
            behavior: 'smooth'
          });
          if (this.closest('.nav-menu')) {
            $$('.nav-menu .menu-active').forEach(el => el.classList.remove('menu-active'));
            this.closest('li').classList.add('menu-active');
          }
          if (document.body.classList.contains('mobile-nav-active')) {
            document.body.classList.remove('mobile-nav-active');
            $('#mobile-nav-toggle i').classList.toggle('fa-times');
            $('#mobile-nav-toggle i').classList.toggle('fa-bars');
            $('#mobile-body-overly').style.display = 'none';
          }
        }
      }
    });
  });

  window.addEventListener('scroll', () => {
    window.scrollY > 100 ? $('#header').classList.add('header-scrolled') : $('#header').classList.remove('header-scrolled');
  });

  const carousel = $('.carousel');
  const carouselIndicators = $('.carousel-indicators');
  
  carousel.querySelectorAll('.carousel-inner .carousel-item').forEach((item, index) => {
    const li = document.createElement('li');
    li.setAttribute('data-target', '#introCarousel');
    li.setAttribute('data-slide-to', index);
    if (index === 0) li.classList.add('active');
    carouselIndicators.appendChild(li);
  });

  const skillsSection = $('#skills');
  if (skillsSection) {
    const observer = new IntersectionObserver((entries) => {
      if (entries[0].isIntersecting) {
        $$('.progress .progress-bar').forEach(bar => {
          bar.style.width = `${bar.getAttribute('aria-valuenow')}%`;
        });
      }
    }, { threshold: 0.8 });
    observer.observe(skillsSection);
  }

  // Implementación básica de contador
  $$('[data-toggle="counter-up"]').forEach(el => {
    const target = parseInt(el.getAttribute('data-target'));
    let count = 0;
    const updateCounter = () => {
      const increment = target / 200;
      if (count < target) {
        count += increment;
        el.innerText = Math.ceil(count);
        setTimeout(updateCounter, 10);
      } else {
        el.innerText = target;
      }
    };
    updateCounter();
  });

  // Filtrado simple para el portafolio
  const portfolioContainer = $('.portfolio-container');
  const portfolioItems = $$('.portfolio-item');
  $$('#portfolio-flters li').forEach(filter => {
    filter.addEventListener('click', function() {
      $$('#portfolio-flters li').forEach(f => f.classList.remove('filter-active'));
      this.classList.add('filter-active');
      const filterValue = this.getAttribute('data-filter');
      portfolioItems.forEach(item => {
        if (filterValue === '*' || item.classList.contains(filterValue.substring(1))) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
    });
  });

  // Nota: Las funcionalidades de carrusel (clients-carousel, testimonials-carousel) 
  // necesitarían una implementación personalizada o una biblioteca específica en JavaScript vanilla.
});
